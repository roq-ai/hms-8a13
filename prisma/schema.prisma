generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model appointment {
  id         String   @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  date       DateTime @db.Date
  patient_id String?  @db.Uuid
  doctor_id  String?  @db.Uuid
  created_at DateTime @default(now()) @db.Timestamp(6)
  updated_at DateTime @default(now()) @db.Timestamp(6)
  doctor     doctor?  @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient    patient? @relation(fields: [patient_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model department {
  id              String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String         @db.VarChar(255)
  organization_id String?        @db.Uuid
  created_at      DateTime       @default(now()) @db.Timestamp(6)
  updated_at      DateTime       @default(now()) @db.Timestamp(6)
  organization    organization?  @relation(fields: [organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  doctor          doctor[]
  staff_member    staff_member[]
}

model doctor {
  id            String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String        @db.VarChar(255)
  department_id String?       @db.Uuid
  user_id       String?       @db.Uuid
  created_at    DateTime      @default(now()) @db.Timestamp(6)
  updated_at    DateTime      @default(now()) @db.Timestamp(6)
  appointment   appointment[]
  department    department?   @relation(fields: [department_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          user?         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  patient       patient[]
}

model organization {
  id          String       @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  description String?      @db.VarChar(255)
  image       String?      @db.VarChar(255)
  name        String       @db.VarChar(255)
  created_at  DateTime     @default(now()) @db.Timestamp(6)
  updated_at  DateTime     @default(now()) @db.Timestamp(6)
  user_id     String       @db.Uuid
  tenant_id   String       @db.VarChar(255)
  department  department[]
  user        user         @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model patient {
  id              String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String        @db.VarChar(255)
  doctor_id       String?       @db.Uuid
  staff_member_id String?       @db.Uuid
  created_at      DateTime      @default(now()) @db.Timestamp(6)
  updated_at      DateTime      @default(now()) @db.Timestamp(6)
  appointment     appointment[]
  doctor          doctor?       @relation(fields: [doctor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  staff_member    staff_member? @relation(fields: [staff_member_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model staff_member {
  id            String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String      @db.VarChar(255)
  department_id String?     @db.Uuid
  user_id       String?     @db.Uuid
  created_at    DateTime    @default(now()) @db.Timestamp(6)
  updated_at    DateTime    @default(now()) @db.Timestamp(6)
  patient       patient[]
  department    department? @relation(fields: [department_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user          user?       @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id           String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String         @unique @db.VarChar(255)
  firstName    String?        @db.VarChar(255)
  lastName     String?        @db.VarChar(255)
  roq_user_id  String         @db.VarChar(255)
  tenant_id    String         @db.VarChar(255)
  created_at   DateTime       @default(now()) @db.Timestamp(6)
  updated_at   DateTime       @default(now()) @db.Timestamp(6)
  doctor       doctor[]
  organization organization[]
  staff_member staff_member[]
}
